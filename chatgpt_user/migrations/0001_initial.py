# Generated by Django 4.2.4 on 2023-09-02 18:54

import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('captcha', '0002_alter_captchastore_id'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomerCaptchaStore',
            fields=[
                ('captchastore_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='captcha.captchastore')),
                ('pic_code_seesion_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
            bases=('captcha.captchastore',),
        ),
        migrations.CreateModel(
            name='EmailVerifyCode',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('to_email_address', models.EmailField(blank=True, help_text='验证码接收邮箱', max_length=64, null=True, verbose_name='验证码接收邮箱')),
                ('verify_code', models.CharField(blank=True, help_text='邮箱验证码', max_length=64, null=True, verbose_name='邮箱验证码')),
                ('verify_ip', models.CharField(blank=True, help_text='验证IP', max_length=128, null=True, verbose_name='验证IP')),
                ('expire_at', models.DateTimeField(blank=True, help_text='验证码过期时间', null=True, verbose_name='验证码过期时间')),
                ('biz_type', models.CharField(choices=[('10', '注册认证'), ('11', '找回密码认证')], default='10', help_text='注册认证', max_length=2, verbose_name='Status (*)')),
                ('update_datetime', models.DateTimeField(auto_now=True, help_text='修改时间', null=True, verbose_name='修改时间')),
                ('create_datetime', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '邮箱验证码核销记录表',
                'verbose_name_plural': '邮箱验证码核销记录表',
                'db_table': 'email_verify_code',
                'ordering': ('-create_datetime',),
            },
        ),
        migrations.CreateModel(
            name='FrontUserExtraEmail',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.EmailField(blank=True, help_text='注册用户,暂只支持邮箱', max_length=255, null=True, verbose_name='注册用户,暂只支持邮箱')),
                ('password', models.CharField(blank=True, help_text='密码', max_length=255, null=True, verbose_name='登录密码')),
                ('salt', models.CharField(blank=True, help_text='加密密码盐值', max_length=255, null=True, verbose_name='密码盐值')),
                ('verified', models.IntegerField(choices=[('0', 'unverified'), ('1', 'verified')], default='0', help_text='是否验证 0 否 1 是', verbose_name='Status (*)')),
                ('update_datetime', models.DateTimeField(auto_now=True, help_text='修改时间', null=True, verbose_name='修改时间')),
                ('create_datetime', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '用户邮箱注册记录表',
                'verbose_name_plural': '用户邮箱注册记录表',
                'db_table': 'front_user_extra_email',
                'ordering': ('-create_datetime',),
            },
        ),
        migrations.CreateModel(
            name='SysEmailSendLog',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('from_email_address', models.EmailField(blank=True, help_text='发件人邮箱', max_length=64, null=True, verbose_name='发件人邮箱')),
                ('to_email_address', models.EmailField(blank=True, help_text='验证码接收邮箱', max_length=64, null=True, verbose_name='验证码接收邮箱')),
                ('biz_type', models.CharField(choices=[('10', '注册认证'), ('11', '找回密码认证')], default='10', help_text='注册认证', max_length=2, verbose_name='Status (*)')),
                ('request_ip', models.CharField(blank=True, help_text='请求IP', max_length=32, null=True, verbose_name='请求IP')),
                ('content', models.TextField(blank=True, help_text='发送内容', null=True, verbose_name='发送内容')),
                ('message_id', models.CharField(blank=True, help_text='发送后会返回一个messageId', max_length=128, null=True, verbose_name='发送后会返回一个messageId')),
                ('status', models.CharField(choices=[('1', '发送成功'), ('0', '发送失败')], default='0', help_text='发送状态，0失败，1成功', max_length=1, verbose_name='Status (*)')),
                ('message', models.CharField(blank=True, help_text='发送后的消息，用于记录成功/失败的信息，成功默认为success', max_length=255, null=True, verbose_name='发送后的消息，用于记录成功/失败的信息，成功默认为success')),
                ('create_datetime', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True, verbose_name='创建时间')),
                ('update_datetime', models.DateTimeField(auto_now=True, help_text='修改时间', null=True, verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '邮箱发送日志',
                'verbose_name_plural': '邮箱发送日志',
                'db_table': 'sys_email_send_log',
                'ordering': ('-create_datetime',),
            },
        ),
        migrations.CreateModel(
            name='FrontUserBase',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('customer_id', models.AutoField(default=100001, help_text='客户唯一编号', primary_key=True, serialize=False, unique=True, verbose_name='客户唯一编号')),
                ('username', models.EmailField(blank=True, help_text='登录邮箱', max_length=255, null=True, verbose_name='登录邮箱')),
                ('nickname', models.CharField(blank=True, help_text='用户昵称', max_length=32, null=True, verbose_name='用户昵称')),
                ('password', models.CharField(blank=True, help_text='密码', max_length=255, null=True, verbose_name='登录密码')),
                ('salt', models.CharField(blank=True, help_text='密码盐值', max_length=255, null=True, verbose_name='密码盐值')),
                ('description', models.CharField(blank=True, help_text='描述', max_length=255, null=True, verbose_name='描述')),
                ('avatar_version', models.CharField(blank=True, help_text='头像版本', max_length=32, null=True, verbose_name='头像版本')),
                ('VIP_TYPE', models.CharField(choices=[('0', '普通用户'), ('1', 'vip付费用户')], default='0', help_text='用户类型', max_length=2, verbose_name='Status (*)')),
                ('last_login_ip', models.CharField(blank=True, help_text='上一次登录IP', max_length=128, null=True, verbose_name='上一次登录IP')),
                ('vip_expire_at', models.DateTimeField(blank=True, help_text='vip过期时间', null=True, verbose_name='vip过期时间')),
                ('update_datetime', models.DateTimeField(auto_now=True, help_text='修改时间', null=True, verbose_name='修改时间')),
                ('create_datetime', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True, verbose_name='创建时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户基础信息表',
                'verbose_name_plural': '用户基础信息表',
                'db_table': 'front_user_base',
                'ordering': ('-create_datetime',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
